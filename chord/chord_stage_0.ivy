#lang ivy1.7

# using UI: succ.p(X,Y,Y) & (forall Z. succ.p(X,Z,Z) -> succ.p(X,Y,Z))

include path_partial_function
include ring

type id

relation active(X:id)
instantiate succ: path_partial_function(id)
instantiate id_ring : ring(id)

var root:id

after init {
    call succ.set(root, root);
    active(X) := X = root;
}

var a:id
invariant active(a) -> exists Y. succ.p(a, Y, Y)

action get_succ(a:id) returns (r:id) =  {
    assert active(a);
    assume succ.dom(a);
    r := succ.get(a);
    #assert active(r);
}

action join(x:id, y:id) = {
    # make sure x is not in the Chord ring
    require ~active(x);
    require active(y);
    
    #var s := get_succ(y);
    #require s = y | id_ring.btw(y, x, s); # note: we should ensure it is joining in the correct place; can't rely on stabilize to take take of it because then will lead to a bug (example: root, b joins with a as successor, c joins with b as successor -> bug when b stabilizes if ring:a-b-c)
   
    call succ.set(x, y);

    active(x) := true;
}

export join

action get_pred(a:id) returns(b:id) = {
    assume succ.dom(b);
    assume a = succ.get(b);
}

action stabilize(x:id) = {
    require active(x);
    var s := get_succ(x);
    var p := get_pred(s);
    
    # asks x's successor for its predecessor and updates x's successor accordingly
    if id_ring.btw(x, p, s) | x = s { # corner cases: x = y (no change), y = s (no change), or x = s (any other node is better than yourself)
	call succ.remove(x);
    	call succ.set(x, p);
    };
}

export stabilize

# SPECIFICATION

# there can't be two or more independent circles
invariant forall X, Y. active(X) & active(Y) & succ.p(X, X, X) -> succ.p(Y, X, X)

# INVARIANTS

# succ relations hold only between active nodes
invariant succ.p(X, Y, Y) -> active(X)
invariant succ.p(X, Y, Y) -> active(Y)

# if three nodes are on a cycle, they should follow btw relations
invariant succ.p(X, Y, Z) & succ.p(X, X, X) & X ~= Y & X ~= Z & Y ~= Z -> id_ring.btw(X, Y, Z)

# root is always active and always has succ/pred
invariant active(root)

# root can reach itself
invariant succ.p(root, root, root)

# root is reachable from every active node
invariant active(X) -> succ.p(X, root, root)




    
