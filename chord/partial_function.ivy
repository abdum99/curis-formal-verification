#lang ivy1.7

# An Ivy module for a partial function graph


module partial_function(domain, range) = {
    relation f(X:domain, Y:range)
    relation dom(X:domain)
    
    # initially empty - f(x) is undefined anywhere
    after init {
	f(X, Y) := false;
	dom(X) := false;
    }

    # updates f(x) to receive y
    action set(x:domain, y:range) = {
	assert ~dom(x);
        f(x, Y) := Y = y;
	dom(x) := true;
    }

    # returns f(x)
    action get(x:domain) returns (y:range) = {
	assert dom(x);
	assume f(x, y);
    }

    # set f(x) to undefined
    action remove(x:domain) = {
	assert dom(x);
        f(x, Y) := false;
	dom(x) := false;
    }

    invariant f(X, Y) & f(X, Z) -> Y = Z
    invariant f(X, Y) -> dom(X)
    var a:domain
    invariant dom(a) -> exists Y. f(a, Y) 
}
