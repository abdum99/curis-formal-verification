#lang ivy1.7

include path_partial_function
include ring

type id

relation active(X:id)
relation pred(X:id, Y:id)
instantiate succ: path_partial_function(id)
instantiate id_ring : ring(id)

var root:id

after init {
    pred(X, Y) := false;
    pred(root, Y) := Y = root;
    call succ.set(root, root);
    active(X) := X = root;
}

var a:id
invariant active(a) -> exists Y. succ.p(a, Y, Y)

action get_succ(a:id) returns (r:id) =  {
    assert active(a);
    assume succ.dom(a);
    r := succ.get(a);
    assert active(r);
}

action join(x:id, y:id) = {
    # make sure x is not in the Chord ring
    require ~active(x);
    require active(y);
    
    #var s := get_succ(y);
    #require s = y | id_ring.btw(y, x, s);
    #require id_ring.btw(y, x, s); # note: we should ensure it is joining in the correct place; can't rely on stabilize to take take of it because then will lead to a bug (example: root, b joins with a as successor, c joins with b as successor -> bug when b stabilizes if ring:a-b-c)

    call succ.set(x, y);

    # joins with no predecessor
    assert ~pred(x, Y);

    active(x) := true;
}

export join

action stabilize(x:id) = {
    require active(x);
    var s := get_succ(x);
    
    # asks x's successor for its predecessor and updates x's successor accordingly
    if some y:id. pred(s, y) { 
	if id_ring.btw(x, y, s) | x = s { # corner cases: x = y (no change), y = s (no change), or x = s (any other node is better than yourself)
	    call succ.remove(x);
    	    call succ.set(x, y);
	};
    };
    
    s := get_succ(x);
    
    # notifies x's successor of x's existence so that it can updates its predecessor
    if some z:id. pred(s, z) {
	if id_ring.btw(z, x, s) | s = z {
    	    pred(s, P) := P = x;
	    # corner cases: x = z (no change), x = s (no change), or
	    # z = s (since x's successor is correct, we know there is no node between x and s -> x is s's predecessor in the ring)
	};
    } else {
	pred(s, P) := P = x;
    };
}

export stabilize

# SPECIFICATION

# there can't be two or more independent circles
invariant forall X, Y. active(X) & active(Y) & succ.p(X, X, X) -> succ.p(Y, X, X)

# INVARIANTS from stage 0

# succ relations hold only between active nodes
invariant succ.p(X, Y, Y) -> active(X)
invariant succ.p(X, Y, Y) -> active(Y)

# if three nodes are on a cycle, they should follow btw relations
invariant succ.p(X, Y, Z) & succ.p(X, X, X) & X ~= Y & X ~= Z & Y ~= Z -> id_ring.btw(X, Y, Z)

# root is always active and always has succ/pred
invariant active(root)

# root can reach itself
invariant succ.p(root, root, root)

# root is reachable from every active node
invariant active(X) -> succ.p(X, root, root)

# INVARIANTS about the predecessor

# every node in the network has an unique predecessor
invariant pred(X, Y) & pred(X, Z) -> Y = Z

# only active nodes can be each other predecessors (since there are no failures)
invariant pred(X, Y) -> active(X) & active(Y)

# root is always active and always has predecessor
invariant exists Y. pred(root, Y)

# pred can reach node (reachability only increases in protocol without failures)
invariant pred(X, Y) -> succ.p(Y, X, X)

# INVARIANTS relating pred with btw
#invariant succ.p(X, Y, Z) & X ~= Y & Y ~= Z & X ~= Z & pred(Z, X) -> id_ring.btw(X, Y, Z) # got from chord10.dot
# the nodes in the path between a node and its predecessor obey to the btw relation  
#invariant forall P, N, X, Y, Z. pred(N, P) & succ.p(P, X, N) & succ.p(P, Y, N) & succ.p(P, Z, N) & succ.p(X, Y, Z) & X ~= Y & Y ~= Z & X ~= Z -> id_ring.btw(X, Y, Z) # correct, but use 5 quant, which makes ivy slow (next inv uses only 4 and is correct) from chord14.dot
#invariant forall P, N, X, Y. pred(N, P) & succ.p(P, X, N) & succ.p(X, Y, N) & X ~= Y & X ~= P & Y ~= P & X ~= N & Y ~= N -> id_ring.btw(P, X, Y) # got from chord14.dot
#invariant forall P, N, X, Y. pred(N, P) & succ.p(P, X, N) & succ.p(X, Y, N) & ~succ.p(N, Y, X) & X ~= Y & X ~= P & Y ~= P -> id_ring.btw(P, X, Y) # got from chord15.dot
invariant forall P, N, X, Y. pred(N, P) & succ.p(P, X, N) & succ.p(X, Y, N) & X ~= Y & X ~= P & Y ~= P & N ~= X -> id_ring.btw(P, X, Y) # got from chord15.dot

# INVARIANTS that are correct, but file verifies without them

# (correct, but file verifies without it) only the root has itself as its own predecessor
# invariant pred(X, X) -> X = root

# (correct, but file verifies without it)
# invariant pred(X, Y) & id_ring.btw(X, Z, Y) & succ.p(Y, Z, Z) -> succ.p(X, Z, Z)

# (correct, but file verifies without it)
# invariant X ~= Y & X ~= Z & Y ~= Z & pred(X, Y) & succ.p(Y, Z, Z) & ~succ.p(X, Z, Z) -> id_ring.btw(Y, Z, X)
# invariant pred(X, Y) & id_ring.btw(X, Z, Y) & succ.p(Y, Z, Z) -> succ.p(X, Z, Z)

# (correct, but file verifies without it)
# invariant succ.p(X, X, X) & ~succ.p(Y, X, X) & X ~= Y & active(Y) -> X = root









    
