#lang ivy1.7

# Stanford CURIS 2019-2020 Formal Verification - Lara Franciulli

# CLIENT-SERVER MODEL - STAGE 2 (IDS FOR MULTISET)
# This model manages connections between
# clients and servers using no message types.
# The model uses ids to keep track of multiple
# requests for a server.
# The main property we want to assure is that
# no two clients are connected to a server at
# the same time.

type client
type server
type idx

module multiset_1(t1) = {
    type idx
    relation r(X: t1, I: idx)

    # multiset of pairs
    after init {
	r(X, I) := false;     
    }
    action add(x: t1) = {
	var id:idx;
	assume ~r(X, id);
	r(x, id) := true;
    }
    action remove(x: t1) = {
	if some id:idx. r(x, id) {
	    r(x, id) := false;
	} else {
	    assert false;
	}
    }
    action member(x: t1) returns (b: bool) = {
	b := exists I. r(x, I);
    }    
}

module multiset_2(t1, t2) = {
    type idx
    relation r(X: t1, Y: t2, I: idx)

    # multiset of pairs
    after init {
	r(X,Y,I) := false;     
    }
    action add(x: t1, y: t2) = {
	var id:idx;
	assume ~r(X, Y, id);
	r(x, y, id) := true;
    }
    action remove(x: t1, y: t2) = {
	if some id:idx. r(x, y, id) {
	    r(x, y, id) := false;
	} else {
	    assert false;
	}
    }
    action member(x: t1, y:t2) returns (b: bool) = {
	b := exists I. r(x, y, I);
    }    
}

# LOCAL STATE OF SERVERS
# true means server has the lock (= is available)
relation semaphore(S:server)  # : server -> bool
# multiset of request messages for server
# relation queue(S:server, C:client, I:idx) # : server -> N^client
instantiate queue(S:server) : multiset_1(client)

# LOCAL STATE OF CLIENTS
# set of locks client holds
relation holds_lock(C:client, S:server) # : client -> 2^server

# STATE OF NETWORK
# indicates if there are pending messages between clients and servers
# relation request_msg(C:client, S:server, I:idx) # : N^(client x server)
relation grant_msg(C:client, S:server, I:idx) # : N^(client x server)
relation release_msg(C:client, S:server, I:idx) # : N^(client x server)
instantiate request_msg : multiset_2(client, server)

# GHOST (ids for enconding multisets)
# indicates if id was already used
relation used(I:idx)

# GHOST monitor (to make sure servers only grant locks that were requested)
object monitor = {
    individual a: client
    relation requested(S:server)
    after init {
	requested(S) := false;
    }
    action request(c: client, s:server) = {
	if c = a {
	    requested(s) := true;
	}
    }
    action grant(c: client, s:server) = {
	if c = a {
	    assert requested(s);
	}
    }
}

after init {
    semaphore(S) := true;
    holds_lock(C, S) := false;
    grant_msg(C, S, I) := false;
    release_msg(C, S, I) := false;
}

# procedure to initialize new message id
action new_idx returns (id:idx) = {
    assume ~used(id);
    used(id) := true;
}

# client requests lock to server
action request_lock(c:client, s:server) = {
    call request_msg.add(c, s);

    call monitor.request(c, s);
}

export request_lock

# server receives request from client and saves it
action save_request(c:client, s:server) = {
    require request_msg.member(c, s);
    call request_msg.remove(c, s);
    call queue(s).add(c);
}

export save_request

# server grants lock to client 
action grant_lock(c:client, s:server, id:idx) = {
    require queue(s).member(c);
    require semaphore(s);
    call queue(s).remove(c);
    semaphore(s) := false;
    grant_msg(c, s, new_idx()) := true;

    call monitor.grant(c, s);
}

export grant_lock

# client receives lock from server
action receive_lock(c:client, s:server, id:idx) = {
    require grant_msg(c, s, id);
    holds_lock(c, s) := true;
    grant_msg(c, s, id) := false;
}

export receive_lock

# client returns lock to server
action return_lock(c:client, s:server) = {
    require holds_lock(c, s);
    holds_lock(c, s) := false;
    release_msg(c, s, new_idx()) := true;
}

export return_lock

# server releases lock from client
action release_lock(c:client, s:server, id:idx) = {
    require release_msg(c, s, id);
    release_msg(c, s, id) := false;
    semaphore(s) := true;
}

export release_lock

# INVARIANTS

# no two clients associated with same server
invariant [mutual_exclusion] forall C1, C2, S. holds_lock(C1, S) & holds_lock(C2, S) -> C1 = C2

# if a client is connected to a server, the server's semaphore is dow
invariant forall C, S. holds_lock(C, S) -> ~semaphore(S)

# there is at most one grant message associated with a server
invariant forall C1, C2, S, I1, I2. grant_msg(C1, S, I1) & grant_msg(C2, S, I2) -> C1 = C2 & I1 = I2

# there is at most one release message associated with a sever
invariant forall C1, C2, S, I1, I2. release_msg(C1, S, I1) & release_msg(C2, S, I2) -> C1 = C2 & I1 = I2

# if there is either a grant or release message for a server, its semaphore is down
invariant forall C, S, I. grant_msg(C, S, I) | release_msg(C, S, I) -> ~semaphore(S)

# there are no grant and release message for a server at the same time
invariant forall C1, C2, S, I1, I2. ~(release_msg(C1, S, I1) & grant_msg(C2, S, I2))

# if a client holds lock for a server, there is no grant message for the server
invariant forall C1, C2, S, I. ~(holds_lock(C1, S) & grant_msg(C2, S, I))

# there are no client holding lock for a server and release message for same server at same time
invariant forall C1, C2, S, I. ~(holds_lock(C1, S) & release_msg(C2, S, I))

# server only grants locks to clients that previously requested it
invariant forall C, S, I. C = monitor.a & grant_msg(C, S, I) -> monitor.requested(S)
# invariant forall C, S, I. C = monitor.a & queue(S).r(C, I) -> monitor.requested(S)
invariant forall C, S, I. C = monitor.a & request_msg.r(C, S, I) -> monitor.requested(S)
